@startuml
class Product {
  - Long id
  - String type // BIKE or SCOOTER
  - boolean isAvailable
  - boolean isDamaged
  - double rentalPerHour
  - double rentalPerDay
}

class Bike extends Product {
  - String size // Small, Medium, Large
}

class Scooter extends Product {
  - String motorStyle // Gas or Electric
}

class Customer {
  - Long id
  - String name
  - String email
  - String contactNumber
  - String address
  - double balance
}

class Rental {
  - Long rentalId
  - Product
  - Customer
  - Date rentalStartDate
  - Date expectedReturnDate
  - Date actualReturnDate
  - boolean isOverdue
  - double rentalAmount
}

class ProductService {
  + addProduct(Product): Product
  + updateProductStatus(Long id, boolean isAvailable, boolean isDamaged): Product
  + getAvailableProducts(): List<Product>
  + getProductCount(String type, String size): int
}

class CustomerService {
  + addCustomer(Customer): Customer
  + getCustomerBalance(Long id): double
  + chargeCustomer(Long id, double amount): Customer
}

class RentalService {
  + recordRental(Long productId, Long customerId, Date rentalStartDate, Date expectedReturnDate): Rental
  + getRentedProducts(): List<Product>
  + getOverdueRentals(): List<Rental>
  + getCustomerRentals(Long customerId): List<Rental>
}

ProductService --> Product
CustomerService --> Customer
RentalService --> Rental
Rental --> Product
Rental --> Customer
@enduml
